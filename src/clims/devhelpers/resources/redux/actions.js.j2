// Auto-generated with `lims django codegen --redux`

import axios from 'axios';

////// List of {{ resource }}
export const GET_{{ resource.const }}_LIST_REQUEST = 'GET_{{ resource.const }}_LIST_REQUEST';
export const get{{ resource }}ListRequest = () => {
  return {
    type: GET_{{ resource.const }}_LIST_REQUEST,
  };
};

export const GET_{{ resource.const }}_LIST_SUCCESS = 'GET_{{ resource.const }}_LIST_SUCCESS';
export const get{{ resource }}ListSuccess = entries => {
  return {
    type: GET_{{ resource.const }}_LIST_SUCCESS,
    entries,
  };
};

export const GET_{{ resource.const }}_LIST_FAILURE = 'GET_{{ resource.const }}_LIST_FAILURE';
export const get{{ resource }}ListFailure = err => ({
  type: GET_{{ resource.const }}_LIST_FAILURE,
  message: err,
});

export const get{{ resource }}List = ({{ ", ".join(list_parameters) }}) => dispatch => {
  dispatch(get{{ resource }}ListRequest());

  const config = {
    params: {
      {% for parameter in list_get_args %}
      {{ parameter }},
      {% endfor %}
    }
  };

  return axios
    .get('{{ list_endpoint }}', config)
    .then(res => dispatch(get{{ resource }}ListSuccess(res.data)))
    .catch(err => dispatch(get{{ resource }}ListFailure(err)));
};

////// Selection in a list of {{ resource }}
export const TOGGLE_SELECT_{{ resource.const }} = 'TOGGLE_SELECT_{{ resource.const }}';
export const toggleSelect{{ resource}} = id => {
  return {
    type: TOGGLE_SELECT_{{ resource.const }},
    id,
  };
};

export const TOGGLE_SELECT_PAGE_OF_{{ resource.const }} = 'TOGGLE_SELECT_PAGE_OF_{{ resource.const }}';
export const toggleSelectPageOf{{ resource }} = doSelect => {
  return {
    type: TOGGLE_SELECT_PAGE_OF_{{ resource.const }},
    doSelect,
  };
};


////// Fetch a single {{ resource }}
export const GET_{{ resource.const }}_REQUEST = 'GET_{{ resource.const }}_REQUEST';
export const get{{ resource }}Request = () => {
  return {
    type: GET_{{ resource.const }}_REQUEST,
  };
};

export const GET_{{ resource.const }}_SUCCESS = 'GET_{{ resource.const }}_SUCCESS';
export const get{{ resource }}Success = entry => {
  return {
    type: GET_{{ resource.const }}_SUCCESS,
    entry,
  };
};

export const GET_{{ resource.const }}_FAILURE = 'GET_{{ resource.const }}_FAILURE';
export const get{{ resource }}Failure = err => ({
  type: GET_{{ resource.const }}_FAILURE,
  message: err,
});

export const get{{ resource }} = {{ single_signature }} => dispatch => {
  dispatch(get{{ resource }}Request());

  const params = {
    {% for parameter in filter_for_single %}
    {{ parameter }},
    {% endfor %}
  };
  return axios
    .get(`{{ single_endpoint }}`, {params})
    .then(res => dispatch(get{{ resource }}Success(res.data{{ "[0]" if filter_for_single else "" }})))
    .catch(err => dispatch(get{{ resource }}Failure(err)));
};

// Default dispatchToProps mapping for all actions created here, 1-1 mapping for all params
export const map{{ resource }}DispatchToProps = dispatch => ({
  get{{ resource }}: {{ single_signature }} =>
    dispatch(get{{ resource }}({{ ", ".join(single_parameters) }})),
  get{{ resource }}List: ({{ ", ".join(list_parameters) }}) =>
    dispatch(get{{ resource }}List({{ ", ".join(list_parameters) }})),
});
