import PropTypes from 'prop-types';
import React from 'react';
import createReactClass from 'create-react-class';
import DocumentTitle from 'react-document-title';
import {Link} from 'react-router';

import ApiMixin from '../mixins/apiMixin';
import IndicatorStore from '../stores/indicatorStore';
import LoadingError from '../components/loadingError';
import LoadingIndicator from '../components/loadingIndicator';
import {t} from '../locale';

// {{TODO_TEMPLATE}}

const SampleGroupRow = createReactClass({
  displayName: 'SampleGroupRow',

  propTypes: {
    app: PropTypes.object.isRequired,
    onRemove: PropTypes.func.isRequired,
    projectId: PropTypes.string.isRequired,
  },

  mixins: [ApiMixin],

  getInitialState() {
    return {
      loading: false,
    };
  },

  onRemove() {
    if (this.state.loading) return;

    let app = this.props.app;

    this.setState(
      {
        loading: true,
      },
      () => {
        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
        this.api.request(`/sample-groups/${app.id}/`, {
          method: 'DELETE',
          success: data => {
            IndicatorStore.remove(loadingIndicator);
            this.props.onRemove();
          },
          error: () => {
            IndicatorStore.remove(loadingIndicator);
            IndicatorStore.add(
              t('Unable to remove application. Please try again.'),
              'error',
              {
                duration: 3000,
              }
            );
          },
        });
      }
    );
  },

  render() {
    let app = this.props.app;

    let btnClassName = 'btn btn-default';
    if (this.state.loading) btnClassName += ' disabled';
    let projectId = this.props.projectId;

    return (
      <tr>
        <td>
          <h4 style={{marginBottom: 5}}>
            <Link to={`/sentry/${projectId}/sample-groups/${app.id}/`}>{app.name}</Link>
          </h4>
          <small style={{color: '#999'}}>{app.clientID}</small>
        </td>
        <td style={{width: 32}}>
          <a
            onClick={this.onRemove.bind(this, app)}
            className={btnClassName}
            disabled={this.state.loading}
          >
            <span className="icon icon-trash" />
          </a>
        </td>
      </tr>
    );
  },
});

const SampleGroups = createReactClass({
  displayName: 'SampleGroups',

  contextTypes: {
    router: PropTypes.object.isRequired,
  },

  mixins: [ApiMixin],

  getInitialState() {
    return {
      loading: true,
      error: false,
      appList: [],
    };
  },

  componentWillMount() {
    this.fetchData();
  },

  remountComponent() {
    this.setState(this.getInitialState(), this.fetchData);
  },

  fetchData() {
    this.setState({
      loading: true,
    });

    this.api.request('/sample-groups/', {
      success: (data, _, jqXHR) => {
        this.setState({
          loading: false,
          error: false,
          appList: data,
        });
      },
      error: () => {
        this.setState({
          loading: false,
          error: true,
        });
      },
    });
  },

  createApplication() {
    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
    // todo validate that it exists
    let {projectId} = this.props.params;
    this.api.request('/sample-groups/', {
      method: 'POST',
      success: app => {
        IndicatorStore.remove(loadingIndicator);
        // TODO: hardcoded
        this.context.router.push(`/sentry/${projectId}/sample-groups/${app.id}/`);
      },
      error: error => {
        IndicatorStore.remove(loadingIndicator);
        IndicatorStore.add(t('Unable to remove application. Please try again.'), 'error');
      },
    });
  },

  onRemoveApplication(app) {
    this.setState({
      appList: this.state.appList.filter(a => a.id !== app.id),
    });
  },

  renderResults() {
    if (this.state.appList.length === 0) {
      return (
        <tr colSpan="2">
          <td className="blankslate well">
            {t('There are no sample groups in the system.')}
          </td>
        </tr>
      );
    }

    return this.state.appList.map(app => {
      return (
        <SampleGroupRow
          key={app.id}
          app={app}
          mofo={'yes!'}
          projectId={this.props.params.projectId}
          onRemove={this.onRemoveApplication.bind(this, app)}
        />
      );
    });
  },

  getTitle() {
    return 'API Applications';
  },

  render() {
    //console.log('HERE bro', this.props.params['projectId']);
    return (
      <DocumentTitle title={this.getTitle()}>
        <div>
          <table className="table">
            <tbody>
              {this.state.loading ? (
                <tr>
                  <td colSpan="2">
                    <LoadingIndicator />
                  </td>
                </tr>
              ) : this.state.error ? (
                <tr>
                  <td colSpan="2">
                    <LoadingError onRetry={this.fetchData} />
                  </td>
                </tr>
              ) : (
                this.renderResults()
              )}
            </tbody>
          </table>

          <div className="form-actions" style={{textAlign: 'right'}}>
            <a
              className="btn btn-primary ref-create-application"
              onClick={this.createApplication}
            >
              {t('Create Sample Group')}
            </a>
          </div>
        </div>
      </DocumentTitle>
    );
  },
});

export default SampleGroups;
